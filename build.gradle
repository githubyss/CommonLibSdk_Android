// plugins {} 只能放在最前面
plugins {
    id 'kotlin-android'
    // id 'kotlin-android-extensions'
    // id 'kotlin-parcelize'
    id 'kotlin-kapt'
    id 'com.alibaba.arouter'
}

// 根据配置是否为 launchApp 决定业务组件 module 是作为 library 还是独立 application
// 工程目录中 gradle.properties 的配置参数，可以通过 project 或者 rootProject 获取
def isShellApp = project.getName() == rootProject.shellApp
def isLaunchApp = project.getName() == rootProject.launchApp

if (isShellApp) {
    println "isShellApp: ${isShellApp}"
}

if (isLaunchApp) { // 壳 APP 始终以 application 模式运行，其他业务组件以依赖库模式根据配置拔插
    println "isLaunchApp: ${isLaunchApp}"
    apply plugin: 'com.android.application'
} else {
    apply plugin: 'com.android.library'
}

println "project"
println "project:               ${project}"
println "project.getName():     ${project.getName()}"
println "projectDir:            ${projectDir}"
println ""
println "root"
println "rootProject:           ${rootProject}"
println "project.rootProject:   ${project.rootProject}"
println "rootProject.getName(): ${rootProject.getName()}"
println "rootDir:               ${rootDir}"
println ""
println "shell"
println "shellApp:              ${shellApp}"
println "project.shellApp:      ${project.shellApp}"
println "rootProject.shellApp:  ${rootProject.shellApp}"
println "isShellApp:            ${isShellApp}"
println ""
println "launch"
println "launchApp:             ${launchApp}"
println "project.launchApp:     ${project.launchApp}"
println "rootProject.launchApp: ${rootProject.launchApp}"
println "isLaunchApp:           ${isLaunchApp}"
println ""


apply from: "${rootDir}/config/buildConfigs.gradle"
apply from: "${rootDir}/config/optionConfigs.gradle"
apply from: "${rootDir}/config/featureConfigs.gradle"
apply from: "${rootDir}/config/signingConfigs.gradle"
apply from: "${rootDir}/config/versionConfigs.gradle"
apply from: "${rootDir}/config/libConfigs.gradle"

android {
    // 资源前缀检查
    resourcePrefix 'comlib_'

    /**
     * defaultConfig：默认构建类型，主要针对开发生命周期的不同阶段进行配置。
     * defaultConfig 是 Android 中的一个默认的配置块，用来定义一些默认配置。它是一个 ProductFlavor，如果一个 productFlavors 没有为某些属性指定特定的配置的话，就会采用默认配置块中的默认配置。比如包名、版本号、版本名等。
     */
    defaultConfig {
        versionCode 1
        versionName "1.0"

        // Java 和 Kotlin 中，可以通过 BuildConfig.BUILD_CONFIG_DESC 获取
        buildConfigField 'String', 'BUILD_CONFIG_DESC', '"可以使用 buildConfigField"'

        // AndroidManifest 中，可以通过 "${MANIFEST_DESC}" 获取
        manifestPlaceholders = [MANIFEST_DESC: "可以使用 manifestPlaceholders"]

        // Java 和 Kotlin 中，可以通过 Resources.getString(R.string.resValueDesc) 获取
        // xml 中，可以通过 R.string.resValueDesc 获取
        resValue('string', 'resValueDesc', "可以使用 resValue")
        // 通过 Resources.getString(R.string.appToken) 获取
        resValue('string', 'appToken', "token123")
        resValue('string', 'appToken', "$token")
        // 通过 Resources.getBoolean(R.bool.isTrue) 获取
        resValue 'bool', 'isTrue', "false"
        // 通过 Resources.getFloat(R.dimen.number) 获取
        resValue "dimen", 'number', "4.0"
    }

    /** buildTypes：构建类型，主要针对开发生命周期的不同阶段进行配置。 */
    buildTypes {
        // 调试版本
        debug {
            if (isLaunchApp) {
                // 是否清理无用资源，依赖于 minifyEnabled，必须应用于 com.android.application
                shrinkResources feature.isMinifyEnabled
            }

            // 与构建类型相关的数据配置
            buildConfigField 'String', 'BUILD_CONFIG_DESC', '"可以使用 buildConfigField"'
            manifestPlaceholders = [MANIFEST_DESC: "可以使用 manifestPlaceholders"]
            resValue('string', 'resValueDesc', "可以使用 resValue")
        }

        // 发布版本
        release {
            if (isLaunchApp) {
                shrinkResources true
            }
            buildConfigField 'String', 'BUILD_CONFIG_DESC', '"可以使用 buildConfigField"'
            manifestPlaceholders = [MANIFEST_DESC: "可以使用 manifestPlaceholders"]
            resValue('string', 'resValueDesc', "可以使用 resValue")
        }
    }

    /**
     * productFlavors：构建特征，主要是用以发布给用户不同的应用版本。需要注意的是，这里的版本并非是版本号，而是功能特性。
     * 由于国内引用市场较多，因此需要为不同市场打包相应的包，通常这种包就叫做渠道包，我们可以使用 productFlavors 配合 manifestPlaceholders 属性的方法来替换渠道值。
     * 一般用渠道的统计无非是用友盟或者其它之类的，以友盟为例：
     */
    /** flavorDimensions：多维度定义 */
    if (isLaunchApp) {
        // flavorDimensions 'library', 'product', 'lib', 'vip', 'free', 'channel', 'nation'
        flavorDimensions(
                // 「库」维度
                'library',
                // 「产品」维度
                'product',
                // 「依赖包」维度
                'lib',
                // 「VIP」维度
                'vip',
                // 「免费」维度
                'free',
                // 「渠道」维度
                'channel',
                // 「国家」维度
                'nation'
        )

        /** productFlavors：多渠道打包配置，属于自定义的 BuildConfig */
        productFlavors {
            if (isLaunchApp) {
                app {
                    applicationId 'com.githubyss.mobile.common.lib'
                    dimension 'library'
                    versionCode 1
                    versionName "1.0"
                }
            }
            // 产品1
            productOne {
                // 维度声明，用来表示此处配置属于某一维度
                dimension 'product'
                // 根据是否为 launchApp 决定添加 applicationId。
                // 应用包名
                if (isLaunchApp) {
                    applicationId 'com.githubyss.mobile.common.lib'
                }
                // 版本号可以一直配着，不需要根据 launchApp 决定
                versionCode 1
                versionName "1.0"
                buildConfigField 'String', 'BUILD_CONFIG_DESC', '"可以使用 buildConfigField"'
                manifestPlaceholders = [
                        MANIFEST_DESC: "可以使用 manifestPlaceholders",
                        // 应用名
                        APP_NAME: "应用名"
                ]
                resValue('string', 'resValueDesc', "可以使用 resValue")
            }
            // 依赖关系 A
            aLib {
                dimension 'lib'
                // 应用包名后缀
                if (isLaunchApp) {
                    applicationIdSuffix ".alib"
                }
            }
            // 依赖关系 B
            bLib {
                dimension 'lib'
                if (isLaunchApp) {
                    applicationIdSuffix ".blib"
                }
            }
            // VIP
            vip {
                dimension 'vip'
                if (isLaunchApp) {
                    applicationIdSuffix ".vip"
                }
                resValue 'bool', 'isVip', "true"
                manifestPlaceholders = [
                        // 免费文案标记
                        VIP_TAG: "VIP 版"
                ]
            }
            // 试用
            trial {
                dimension 'vip'
                if (isLaunchApp) {
                    applicationIdSuffix ".trial"
                }
                resValue 'bool', 'isVip', "false"
                manifestPlaceholders = [VIP_TAG: "试用版"]
            }
            // 免费
            free {
                dimension 'free'
                if (isLaunchApp) {
                    applicationIdSuffix ".free"
                }
                resValue 'string', 'freeTag', "免费版"
                resValue 'bool', 'isFree', "true"
            }
            // 收费
            paid {
                dimension 'free'
                if (isLaunchApp) {
                    applicationIdSuffix ".paid"
                }
                resValue 'string', 'freeTag', "收费版"
                resValue 'bool', 'isFree', "false"
            }
            // 豌豆荚
            wandoujia {
                dimension 'channel'
                manifestPlaceholders = [UMENG_CHANNEL_VALUE: "wandoujia"]
            }
            // 百度
            baidu {
                dimension 'channel'
                manifestPlaceholders = [UMENG_CHANNEL_VALUE: "baidu"]
            }
            // 360
            c360 {
                dimension 'channel'
                manifestPlaceholders = [UMENG_CHANNEL_VALUE: "c360"]
            }
            // UC
            uc {
                dimension 'channel'
                manifestPlaceholders = [UMENG_CHANNEL_VALUE: "uc"]
            }
            // 中国
            china {
                dimension 'nation'
            }
            // 法国
            france {
                dimension 'nation'
            }
        }

        // productFlavors {
        //     wandoujia {}
        //     baidu {}
        //     c360 {}
        //     uc {}
        //
        //     productFlavors.all { flavor ->
        //         flavor.manifestPlaceholders = [UMENG_CHANNEL_VALUE: name]
        //     }
        // }
    }

    /** sourceSets：源文件路径设置 */
    sourceSets {
        // main.java.srcDirs += 'src/main/kotlin'

        // main {
        //     java.srcDirs += 'src/main/kotlin'
        //     test.java.srcDirs += 'src/test/kotlin'
        //     res.srcDirs += [
        //             'src/main/res/common',
        //             'src/main/res/value',
        //     ]
        // }

        // 主代码路径
        main {
            java {
                srcDirs 'src/main/java'
                srcDirs 'src/main/kotlin'
            }
            res {
                srcDirs 'src/main/res'
                srcDirs 'src/main/res/common'
            }
            manifest {
                srcFile 'src/main/AndroidManifest.xml'
            }
            jniLibs {
                srcDirs 'libs'
            }
        }

        if (isLaunchApp) {
            // 独立运行代码路径
            app {
                java {
                    srcDirs 'src/app/java'
                    srcDirs 'src/app/kotlin'
                }
                res {
                    srcDirs 'src/app/res'
                    srcDirs 'src/app/res/common'
                }
                manifest {
                    srcFile 'src/app/AndroidManifest.xml'
                }
            }
        }

        // 测试代码路径
        test {
            java {
                srcDirs 'src/test/java'
                srcDirs 'src/test/kotlin'
            }
        }

        all {
            // set -> println "集合 ${set.name} 的文件是 ${set.java.srcDirs}"
        }
    }

    // 是否启用 ViewBinding
    // viewBinding {
    //     enabled = feature.isViewBindingEnabled
    // }

    // 是否启用 DataBinding
    // dataBinding {
    //     enabled feature.isDataBindingEnabled
    // }

    // buildFeatures {
    //     // 是否启用 Compose
    //     // Enables Jetpack Compose for this module
    //     compose feature.isComposeEnabled
    // }
}

// 依赖包
dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])

    // 可以根据不同的渠道，导入不同版本的依赖包
    // aLibApi "com.aaa.bbb:bbb:x.x.1"
    // bLibApi "com.aaa.bbb:bbb:x.x.2"

    // /** Kotlin */
    // api dependenciesLib.kotlin_stdlib_jdk7
    // api dependenciesLib.kotlin_reflect
    // api dependenciesLib.kotlinx_coroutines_core
    // api dependenciesLib.kotlinx_coroutines_android

    // /** Androidx Compatibility */
    // api dependenciesLib.androidx_appcompat

    // /** Androidx KTX */
    // api dependenciesLib.androidx_core_ktx
    // api dependenciesLib.androidx_fragment_ktx
    // api dependenciesLib.androidx_collection_ktx
    //
    // /** Androidx Sys */
    // api dependenciesLib.androidx_localbroadcastmanager
    //
    // /** Androidx UI */
    // api dependenciesLib.androidx_constraintlayout
    //
    // /** Androidx Compose Ui */
    // api dependenciesLib.androidx_compose_ui
    // api dependenciesLib.androidx_compose_ui_tooling
    // api dependenciesLib.androidx_compose_ui_tooling_data
    // api dependenciesLib.androidx_compose_ui_tooling_preview
    // debugImplementation dependenciesLib.androidx_compose_ui_tooling
    //
    // api dependenciesLib.androidx_compose_material
    // api dependenciesLib.androidx_compose_animation
    // api dependenciesLib.androidx_compose_foundation
    //
    // /** Androidx Compose Integration with activities */
    // api dependenciesLib.androidx_compose_activity
    //
    // /** Androidx Compose Integration with ViewModels */
    // api dependenciesLib.androidx_compose_lifecycle_viewmodel
    //
    // /** Androidx Lifecycle */
    // api dependenciesLib.androidx_lifecycle_runtime_ktx
    // api dependenciesLib.androidx_lifecycle_viewmodel_ktx
    // api dependenciesLib.androidx_lifecycle_livedata_ktx
    // api dependenciesLib.androidx_lifecycle_extensions
    // // api dependenciesLib.android_arch_lifecycle_extensions
    //
    // /** Material Design Support */
    // api dependenciesLib.google_material
    //
    // /** Flexbox */
    // api dependenciesLib.google_flexbox
    //
    // /** Gson */
    // api dependenciesLib.google_gson
    //
    // /** Eventbus */
    // api dependenciesLib.greenrobot_eventbus
    //
    // /** RxAndroid */
    // // api dependenciesLib.reactivex_rxandroid
    // api dependenciesLib.reactivex_rxjava3_rxandroid
    //
    // /** Joda Time */
    // api dependenciesLib.joda_time
    //
    // /** Wechat */
    // api dependenciesLib.tencent_wechat_sdk_android
    //
    // /** Http */
    // api dependenciesLib.apache_httpcore
    // api dependenciesLib.apache_httpmime
    //
    // /** Volley */
    // api dependenciesLib.mcxiaoke_volley
    //
    // /** Retrofit2 */
    // api dependenciesLib.squareup_retrofit2
    // api dependenciesLib.squareup_retrofit2_converter_moshi
    //
    // /** Glide */
    // api dependenciesLib.bumptech_glide
    // kapt dependenciesLib.bumptech_glide_compiler
    //
    // /** Coil */
    // api dependenciesLib.coil
    //
    // /** ARouter */
    // api dependenciesLib.alibaba_arouter_api
    // kapt dependenciesLib.alibaba_arouter_compiler
    //
    // /** Test */
    // testImplementation dependenciesLib.junit
    // androidTestImplementation dependenciesLib.androidx_test_junit
    // androidTestImplementation dependenciesLib.androidx_test_espresso_core
    // androidTestImplementation androidx_compose_ui_test_junit4

    // // 按需加载依赖
    // // 整编时将全部组件添加依赖
    // if (buildAll.toBoolean()) {
    //     for (String name : allComponents.split(",")) {
    //         if (!name.isEmpty()) {
    //             implementation(project(":$name"))
    //         }
    //     }
    // }
    // // 非整编时可以选择组件加入容器 App
    // else {
    //     for (String name : loadComponents.split(",")) {
    //         if (!name.isEmpty()) {
    //             implementation(project(":$name"))
    //         }
    //     }
    // }

    // configurations {
    //     all {
    //         resolutionStrategy.eachDependency { DependencyResolveDetails details ->
    //             def requested = details.requested
    //             if (requested.group == 'androidx.appcompat') {
    //                 if (!requested.name.startsWith('multidex')) {
    //                     details.useVersion '1.2.+'
    //                 }
    //             }
    //         }
    //         exclude module: 'httpclient'
    //     }
    // }
}

configurations {
    all {
        resolutionStrategy {
            // force "androidx.compose.material:material:$androidx_compose_version"
            // force "androidx.compose.ui:ui-tooling:1.0.0-beta09"
            // force "androidx.compose.ui:ui-tooling-data:1.0.0-beta09"
            // force "androidx.compose.ui:ui-tooling-preview:1.0.0-beta09"
        }
    }
}
