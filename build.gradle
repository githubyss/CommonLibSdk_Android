// 根据配置是否为 launchApp 决定业务组件 module 是作为 library 还是独立 application
boolean isShellApp = project.getName() == shellApp
boolean isLaunchApp = project.getName() == launchApp
if (isLaunchApp) { // 壳 APP 始终以 application 模式运行，其他业务组件以依赖库模式根据配置拔插
    apply plugin: 'com.android.application'
} else {
    apply plugin: 'com.android.library'
}
apply plugin: 'kotlin-android'
// apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-parcelize'
apply plugin: 'kotlin-kapt'
apply plugin: 'com.alibaba.arouter'

//
android {
    /**
     * 构建工具的版本。
     * 其中包括了打包工具 aapt、dx 等等。这个工具的目录位于..sdk_path/build-tools/XX.XX.XX。
     */
    buildToolsVersion build_tools_version

    /**
     * SDK 编译版本。
     * 告诉 Gradle 用哪个 Android SDK 版本编译你的应用。使用任何新添加的 API 就需要使用对应 Level 的 Android SDK。
     * 修改 compileSdkVersion 不会改变运行时的行为。当你修改了 compileSdkVersion 的时候，可能会出现新的编译警告、编译错误，但新的 compileSdkVersion 不会被包含到 APK 中：它纯粹只是在编译的时候使用。
     * 强烈推荐总是使用最新的 SDK 进行编译。在现有代码上使用新的编译检查可以获得很多好处，避免新弃用的 API，并且为使用新的 API 做好准备。
     *
     * 就是运行我们这个项目的需要的 SDK。比如如果我们需要在 Android 10.0 Q (API 29) 的版本运行，只要改为 29 就好了。
     */
    compileSdkVersion compile_sdk_version.toInteger()

    // 资源前缀检查
    resourcePrefix 'comlib_'

    /**
     * defaultConfig：默认构建类型，主要针对开发生命周期的不同阶段进行配置。
     * defaultConfig 是 Android 中的一个默认的配置块，用来定义一些默认配置。它是一个 ProductFlavor，如果一个 productFlavors 没有为某些属性指定特定的配置的话，就会采用默认配置块中的默认配置。比如包名、版本号、版本名等。
     */
    defaultConfig {
        /**
         * 最小支持的 SDK 版本（手机的 Android 系统版本）。
         * 如果 compileSdkVersion 设置为可用的最新 API，那么 minSdkVersion 则是应用可以运行的最低要求。
         * minSdkVersion 是各大 Android 应用商店用来判断用户设备是否可以安装某个应用的标志之一。
         * 在开发时 minSdkVersion 也起到一个重要角色：lint 默认会在项目中运行，它在你使用了低于 minSdkVersion 的 API 时会警告你，帮你避免调用不存在的 API 的运行时问题。如果只在较高版本的系统上才使用某些 API，通常使用运行时检查系统版本的方式解决。
         */
        minSdkVersion min_sdk_version

        /**
         * 新特性支持的 SDK 版本。
         * targetSdkVersion 是 Android 提供向前兼容的主要依据。
         * 随着 Android 系统的升级，某个系统的 API 或者模块的行为会发生改变，但是为了保证老APK的行为与之前一致兼容，只要 apk 中的 targetSdkVersion 不变，即使这个 APK 安装到新的系统上，其行为还是保持老的系统上的。
         * 在应用的 targetSdkVersion 没有更新之前，系统不会应用最新的行为变化。这允许你在适应新的行为变化之前就可以使用新的 API（因为你已经更新了 compileSdkVersion 不是吗？）
         * targetSdkVersion 指定的值表示你在该目标版本上已经做过了充分的测试，系统将会为你的应用程序启用一些最新的功能和特征。比如，Android 6.0 (API 23) 系统引用了运行时权限这个功能，如果你将 targetSdkVersion 指定为 23 或者更高，那么系统就会为你的程序启动运行时权限。如果你将 targetSdkVersion 指定为 22，那么就说明你的程序最高只在 Android 5.1 (API 22) 系统上做过充分的测试，Android 6.0 系统中引入的新功能就不会启动了。
         * 说通俗一点：
         * 比如你将 targetSdkVersion 设置为 22，涉及某个（或某几个）权限，你直接在 mainfest 中配置权限即可，然后在 java 代码中进行获取权限后的逻辑处理即可。
         * 但如果你将 targetSdkVersion 设置为 23 或更高，你除了在 mainfest 中配置权限外，还需要在 java 代码中判断用户是否同意权限，如果同意，执行什么业务操作；如果不同意，执行什么业务操作（一般是提示某某权限被拒后，某某功能无法正常使用）。如果你只在 mainfest 中配置了权限，targetSdkVersion 又大于等于 23，Java 代码中不进行运行时权限的代码，你的应用程序就直接报错了。
         */
        targetSdkVersion target_sdk_version

        /**
         * 理想上，在稳定状态下三者的关系应该更像这样：
         * minSdkVersion (lowest possible) <= targetSdkVersion == compileSdkVersion (latest SDK)
         * 用较低的 minSdkVersion 来覆盖最大的人群，用最新的 SDK 设置 targetSdkVersion 和 compileVersion 来获得最好的外观和行为。
         */

        // 根据是否为 launchApp 决定添加 applicationId 和版本号。
        if (isLaunchApp) {
            versionCode 1
            versionName "1.0"
            testInstrumentationRunner 'androidx.test.runner.AndroidJUnitRunner'
        }

        consumerProguardFiles 'consumer-rules.pro'

        // 默认的数据配置
        // resValue('string', 'appToken', "token123")
        // resValue 'bool', 'isTrue', "false"
        // resValue "integer", 'number', "4"
    }

    /** buildTypes：构建类型，主要针对开发生命周期的不同阶段进行配置。 */
    buildTypes {
        // 调试模式
        debug {
            // 是否可以调试
            debuggable isDebuggable.toBoolean()
            // 是否开启混淆
            minifyEnabled isMinifyEnabled.toBoolean()
            // 混淆文件配置
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'

            // 与构建类型相关的数据配置
            // Java 和 Kotlin 中，可以通过 BuildConfig.IS_RELEASE 获取
            buildConfigField 'boolean', 'IS_RELEASE', "false"
            // AndroidManifest 中，可以通过 "${CHANNEL_VALUE}"、"${APP_NAME}" 获取
            manifestPlaceholders = [CHANNEL_VALUE: "debug", APP_NAME: "调试包"]
            // Java 和 Kotlin 中，可以通过 Resources.getString(R.string.appToken) 获取
            // xml 中，可以通过 R.string.appToken 获取
            resValue('string', 'appToken', "token123")
            resValue('string', 'appToken', "$token")
        }

        // 发行模式
        release {
            debuggable isDebuggable.toBoolean()
            minifyEnabled isMinifyEnabled.toBoolean()
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'

            buildConfigField 'boolean', 'IS_RELEASE', "true"
            manifestPlaceholders = [CHANNEL_VALUE: "release", APP_NAME: "发行包"]
            resValue('string', 'appToken', "token123")
            resValue('string', 'appToken', "$token")
        }
    }

    /**
     * productFlavors：构建特征，主要是用以发布给用户不同的应用版本。需要注意的是，这里的版本并非是版本号，而是功能特性。
     * 由于国内引用市场较多，因此需要为不同市场打包相应的包，通常这种包就叫做渠道包，我们可以使用 productFlavors 配合 manifestPlaceholders 属性的方法来替换渠道值。
     * 一般用渠道的统计无非是用友盟或者其它之类的，以友盟为例：
     */
    if (isLaunchApp) {
        // flavorDimensions：多维度定义
        flavorDimensions(
                // 「产品」维度
                'product',
                // 「依赖包」维度
                'lib',
                // 「是否 VIP」维度
                'isVip',
                // 「是否免费」维度
                'isFree',
                // 「渠道」维度
                'channel',
                // 「国家」维度
                'nation'
        )
        // productFlavors：多渠道打包配置
        productFlavors {
            // 产品1
            productOne {
                // 维度声明，用来表示此处配置属于某一维度
                dimension 'product'
                // 应用包名
                applicationId 'com.githubyss.mobile.common.lib'

                buildConfigField 'string', 'BUILD_CONFIG_DESC', "可以使用 buildConfigField"
                manifestPlaceholders = [
                        MANIFEST_DESC: "可以使用 manifestPlaceholders",
                        // 应用名
                        APP_NAME     : "应用名",
                        // 服务名
                        SERVICE_NAME : "服务名"
                ]
                resValue('string', 'resValueDesc', "可以使用 resValue")
            }
            // 依赖关系 A
            aLib {
                dimension 'lib'
                // 应用包名后缀
                applicationIdSuffix ".alib"
            }
            // 依赖关系 B
            bLib {
                dimension 'lib'
                applicationIdSuffix ".blib"
            }
            // VIP
            vip {
                dimension 'isVip'
                applicationIdSuffix ".vip"
                resValue 'bool', 'isVip', "true"
                manifestPlaceholders = [
                        // 免费文案标记
                        VIP_TAG: "VIP 版"
                ]
            }
            // 试用
            trial {
                dimension 'isVip'
                applicationIdSuffix ".trial"
                resValue 'bool', 'isVip', "false"
                manifestPlaceholders = [VIP_TAG: "试用版"]
            }
            // 免费
            free {
                dimension 'isFree'
                applicationIdSuffix ".free"
                resValue 'string', 'freeTag', "免费版"
                resValue 'bool', 'isFree', "true"
            }
            // 收费
            paid {
                dimension 'isFree'
                applicationIdSuffix ".paid"
                resValue 'string', 'freeTag', "收费版"
                resValue 'bool', 'isFree', "false"
            }
            // 豌豆荚
            wandoujia {
                dimension 'channel'
                manifestPlaceholders = [UMENG_CHANNEL_VALUE: "wandoujia"]
            }
            // 百度
            baidu {
                dimension 'channel'
                manifestPlaceholders = [UMENG_CHANNEL_VALUE: "baidu"]
            }
            // 360
            c360 {
                dimension 'channel'
                manifestPlaceholders = [UMENG_CHANNEL_VALUE: "c360"]
            }
            // UC
            uc {
                dimension 'channel'
                manifestPlaceholders = [UMENG_CHANNEL_VALUE: "uc"]
            }
            // 中国
            china {
                dimension 'nation'
            }
            // 法国
            france {
                dimension 'nation'
            }
        }

        // productFlavors {
        //     wandoujia {}
        //     baidu {}
        //     c360 {}
        //     uc {}
        //
        //     productFlavors.all { flavor ->
        //         flavor.manifestPlaceholders = [UMENG_CHANNEL_VALUE: name]
        //     }
        // }
    }

    /** sourceSets：源文件路径设置 */
    sourceSets {
        // main.java.srcDirs += 'src/main/kotlin'

        // main {
        //     java.srcDirs += 'src/main/kotlin'
        //     test.java.srcDirs += 'src/test/kotlin'
        //     res.srcDirs += [
        //             'src/main/res/common',
        //             'src/main/res/value',
        //     ]
        // }

        // 主代码路径
        main {
            java {
                srcDirs 'src/main/java'
                srcDirs 'src/main/kotlin'
            }
            res {
                srcDirs 'src/main/res'
                srcDirs 'src/main/res/common'
            }
            manifest {
                srcFile 'src/main/AndroidManifest.xml'
            }
            jniLibs {
                srcDirs 'libs'
            }
        }

        if (isLaunchApp) {
            // 独立运行代码路径
            alone {
                java {
                    srcDirs 'src/alone/java'
                    srcDirs 'src/alone/kotlin'
                }
                res {
                    srcDirs 'src/alone/res'
                    srcDirs 'src/alone/res/common'
                }
                manifest {
                    srcFile 'src/alone/AndroidManifest.xml'
                }
                jniLibs {
                    srcDirs 'libs'
                }
            }
        }

        // 测试代码路径
        test {
            java {
                srcDirs 'src/test/java'
                srcDirs 'src/test/kotlin'
            }
        }

        sourceSets.all {
            set -> println "${set.name} 的文件是 ${set.java.srcDirs}"
        }
    }

    compileOptions {
        sourceCompatibility java_version
        targetCompatibility java_version
    }

    packagingOptions {
        exclude 'META-INF/NOTICE.txt'
        exclude 'META-INF/NOTICE'
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/DEPENDENCIES'
        exclude 'META-INF/metadata.kotlin_module'
        exclude 'META-INF/metadata.jvm.kotlin_module'
    }

    // viewBinding {
    //     enabled = isViewBindingEnabled.toBoolean()
    // }

    // 是否启用 DataBinding
    dataBinding {
        enabled = isDataBindingEnabled.toBoolean()
    }

    // androidExtensions {
    //     experimental = true
    // }

    // lintOptions {
    //     abortOnError false
    // }
}

// 依赖包
dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])

    // 可以根据不同的渠道，导入不同版本的依赖包
    // aLibApi "com.aaa.bbb:bbb:x.x.1"
    // bLibApi "com.aaa.bbb:bbb:x.x.2"

    /* Kotlin */
    api "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"

    /* Androidx Compatibility */
    api "androidx.appcompat:appcompat:$androidx_appcompat_version"
    api "androidx.core:core-ktx:$androidx_core_ktx_version"
    api "androidx.recyclerview:recyclerview:$androidx_recyclerview_version"
    api "androidx.constraintlayout:constraintlayout:$androidx_constraintlayout_version"
    api "androidx.localbroadcastmanager:localbroadcastmanager:$androidx_localbroadcastmanager_version"
    api "androidx.lifecycle:lifecycle-extensions:$androidx_lifecycle_version"

    /* Material Design Support */
    api "com.google.android.material:material:$material_design_version"

    /* Flexbox */
    api "com.google.android:flexbox:$flexbox_version"

    /* ARouter */
    api "com.alibaba:arouter-api:$arouter_api_version"
    kapt "com.alibaba:arouter-compiler:$arouter_compile_version"

    /* Eventbus */
    api "org.greenrobot:eventbus:$eventbus_version"

    /* RxAndroid */
    // api "io.reactivex:rxandroid:$rxandroid_version"
    api "io.reactivex.rxjava3:rxandroid:$rxandroid3_version"

    /* Joda Time */
    api "joda-time:joda-time:$joda_time_version"

    /* Glide */
    api "com.github.bumptech.glide:glide:$glide_api_version"
    kapt "com.github.bumptech.glide:compiler:$glide_compile_version"

    /* Test */
    testImplementation "junit:junit:$junit_version"
    androidTestImplementation "androidx.test.ext:junit:$androidx_test_junit_version"
    androidTestImplementation "androidx.test.espresso:espresso-core:$androidx_test_espresso_core_version"

    // // 按需加载依赖
    // // 整编时将全部组件添加依赖
    // if (buildAll.toBoolean()) {
    //     for (String name : allComponents.split(",")) {
    //         if (!name.isEmpty()) {
    //             implementation(project(":$name"))
    //         }
    //     }
    // }
    // // 非整编时可以选择组件加入容器 App
    // else {
    //     for (String name : loadComponents.split(",")) {
    //         if (!name.isEmpty()) {
    //             implementation(project(":$name"))
    //         }
    //     }
    // }

    // configurations {
    //     all {
    //         resolutionStrategy.eachDependency { DependencyResolveDetails details ->
    //             def requested = details.requested
    //             if (requested.group == 'androidx.appcompat') {
    //                 if (!requested.name.startsWith('multidex')) {
    //                     details.useVersion '1.2.+'
    //                 }
    //             }
    //         }
    //         exclude module: 'httpclient'
    //     }
    // }
}

kapt {
    arguments {
        arg('moduleName', project.getName())
    }
}
